#!/usr/bin/env python
import argparse
import logging
import os
import shutil
import sys
import time
from datetime import timedelta

from yaset.ensemble.apply import apply_model
from yaset.ensemble.train import train_ensemble
from yaset.utils.path import ensure_dir

if __name__ == "__main__":

    start = time.time()

    parser = argparse.ArgumentParser()

    parser.add_argument("--debug", action='store_true')

    subparsers = parser.add_subparsers(title="Sub-commands", description="Valid sub-commands",
                                       help="Valid sub-commands", dest="subparser_name")

    parser_apply = subparsers.add_parser("APPLY",
                                         help="Apply an ensemble model on a CoNLL file")
    parser_apply.add_argument("--model-dir",
                              help="Ensemble model directory",
                              dest="model_dir", type=str, required=True)
    parser_apply.add_argument("--input-file",
                              help="Input CoNLL file",
                              dest="input_file", type=str, required=True)
    parser_apply.add_argument("--output-file",
                              help="Output CoNLL file",
                              dest="output_file", type=str, required=True)
    parser_apply.add_argument("--overwrite",
                              help="Overwrite existing output file",
                              dest="overwrite", action="store_true")
    parser_apply.add_argument("--nb-cores",
                              help="Number of CPU cores to use for prediction",
                              dest="nb_cores", type=int, default=1)
    parser_apply.add_argument("--cuda",
                              help="Use GPU",
                              dest="cuda", action="store_true")

    parser_ensemble = subparsers.add_parser("TRAIN",
                                            help="Train an ensemble model (at least two models)")
    parser_ensemble.add_argument("--option-file",
                                 help="Training option file",
                                 dest="option_file", type=str, required=True)
    parser_ensemble.add_argument("--output-dir",
                                 help="Output directory where files will be written",
                                 dest="output_dir", type=str, required=True)
    parser_ensemble.add_argument("--model-1",
                                 help="First model of the ensemble",
                                 dest="model_1", type=str, required=True)
    parser_ensemble.add_argument("--model-2",
                                 help="Second model of the ensemble",
                                 dest="model_2", type=str, required=True)
    parser_ensemble.add_argument("--model-3",
                                 help="Third model of the ensemble",
                                 dest="model_3", type=str)
    parser_ensemble.add_argument("--model-4",
                                 help="Fourth model of the ensemble",
                                 dest="model_4", type=str)
    parser_ensemble.add_argument("--model-5",
                                 help="Fifth model of the ensemble",
                                 dest="model_5", type=str)
    parser_ensemble.add_argument("--overwrite",
                                 help="Overwrite existing output directory",
                                 dest="overwrite", action="store_true")

    args = parser.parse_args()

    log = logging.getLogger('')
    log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s")

    # Setting debug level
    if args.debug:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    # Adding a stdout handler
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(log_format)
    log.addHandler(ch)

    if args.subparser_name == "APPLY":

        if not os.path.isfile(os.path.abspath(args.input_file)):
            raise FileNotFoundError("The input file does not exist: {}".format(
                os.path.abspath(args.input_file)
            ))

        if not os.path.isdir(os.path.abspath(args.model_dir)):
            raise FileNotFoundError("The model dir does not exist: {}".format(
                os.path.abspath(args.model_dir)
            ))

        if not args.overwrite:
            if os.path.isfile(os.path.abspath(args.output_file)):
                raise FileNotFoundError("The output file already exists: {}".format(
                    os.path.abspath(args.output_file)
                ))

        apply_model(model_dir=os.path.abspath(args.model_dir),
                    input_file=os.path.abspath(args.input_file),
                    output_file=os.path.abspath(args.output_file),
                    cuda=args.cuda,
                    nb_cores=args.nb_cores)

    elif args.subparser_name == "TRAIN":

        if not os.path.isfile(os.path.abspath(args.option_file)):
            raise FileNotFoundError("The option file does not exist: {}".format(
                os.path.abspath(args.option_file)
            ))

        if not os.path.isdir(os.path.abspath(args.model_1)):
            raise NotADirectoryError("The model directory does not exist: {}".format(args.model_1))

        if not os.path.isdir(os.path.abspath(args.model_2)):
            raise NotADirectoryError("The model directory does not exist: {}".format(args.model_2))

        if args.model_3 and not os.path.isdir(os.path.abspath(args.model_3)):
            raise NotADirectoryError("The model directory does not exist: {}".format(args.model_3))

        if args.model_4 and not os.path.isdir(os.path.abspath(args.model_4)):
            raise NotADirectoryError("The model directory does not exist: {}".format(args.model_4))

        if args.model_5 and not os.path.isdir(os.path.abspath(args.model_5)):
            raise NotADirectoryError("The model directory does not exist: {}".format(args.model_5))

        if not args.overwrite:
            if os.path.isdir(os.path.abspath(args.output_dir)):
                raise FileNotFoundError("The output dir already exists: {}".format(
                    os.path.abspath(args.output_dir)
                ))

        if os.path.isdir(os.path.abspath(args.output_dir)):
            logging.debug("Overwriting output directory")
            shutil.rmtree(os.path.abspath(args.output_dir))

        ensure_dir(directory=os.path.abspath(args.output_dir))

        log_file = os.path.join(os.path.abspath(args.output_dir), "training.log")
        log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
        log = logging.getLogger('')

        fh = logging.FileHandler(log_file, encoding="UTF-8")
        fh.setFormatter(log_format)
        log.addHandler(fh)

        target_model_dir = os.path.join(os.path.abspath(args.output_dir), "input_models")
        ensure_dir(target_model_dir)

        target_model_1 = None
        target_model_2 = None
        target_model_3 = None
        target_model_4 = None
        target_model_5 = None

        if args.model_1:
            source_model_1 = os.path.abspath(args.model_1)
            target_model_1 = os.path.join(target_model_dir, "model-1")
            shutil.copytree(source_model_1, target_model_1)

        if args.model_2:
            source_model_2 = os.path.abspath(args.model_2)
            target_model_2 = os.path.join(target_model_dir, "model-2")
            shutil.copytree(source_model_2, target_model_2)

        if args.model_3:
            source_model_3 = os.path.abspath(args.model_3)
            target_model_3 = os.path.join(target_model_dir, "model-3")
            shutil.copytree(source_model_3, target_model_3)

        if args.model_4:
            source_model_4 = os.path.abspath(args.model_4)
            target_model_4 = os.path.join(target_model_dir, "model-4")
            shutil.copytree(source_model_4, target_model_4)

        if args.model_5:
            source_model_5 = os.path.abspath(args.model_5)
            target_model_5 = os.path.join(target_model_dir, "model-5")
            shutil.copytree(source_model_5, target_model_5)

        train_ensemble(option_file=os.path.abspath(args.option_file),
                       output_dir=os.path.abspath(args.output_dir),
                       model_1=target_model_1,
                       model_2=target_model_2,
                       model_3=target_model_3,
                       model_4=target_model_4,
                       model_5=target_model_5)

    end = time.time()

    logging.info("Done ! (Time elapsed: {})".format(timedelta(seconds=round(end - start))))

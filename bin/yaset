#!/usr/bin/env python
import argparse
import logging
import os
import shutil
import sys
import time

from yaset.inference.apply import apply_model
from yaset.single.train import train_model
from yaset.tools.conll import convert_spaces_to_tabulations, convert_labels
from yaset.utils.path import ensure_dir

if __name__ == "__main__":

    start = time.time()

    parser = argparse.ArgumentParser()

    parser.add_argument("--debug", action='store_true')

    subparsers = parser.add_subparsers(title="Sub-commands", description="Valid sub-commands",
                                       help="Valid sub-commands", dest="subparser_name")

    parser_apply = subparsers.add_parser("APPLY",
                                         help="Apply model on a CoNLL file")
    parser_apply.add_argument("--model-dir",
                              help="NER model directory",
                              dest="model_dir", type=str, required=True)
    parser_apply.add_argument("--input-file",
                              help="Input CoNLL file",
                              dest="input_file", type=str, required=True)
    parser_apply.add_argument("--output-file",
                              help="Output CoNLL file",
                              dest="output_file", type=str, required=True)
    parser_apply.add_argument("--overwrite",
                              help="Overwrite existing output file",
                              dest="overwrite", action="store_true")
    parser_apply.add_argument("--cuda",
                              help="Use GPU",
                              dest="cuda", action="store_true")

    parser_labels = subparsers.add_parser("CONVERT-LABELS",
                                          help="Convert NER tagging scheme")
    parser_labels.add_argument("--input-file",
                               help="Input CoNLL file",
                               dest="input_file", type=str, required=True)
    parser_labels.add_argument("--output-file",
                               help="Output CoNLL file",
                               dest="output_file", type=str, required=True)
    parser_labels.add_argument("--input-label-type",
                               help="Label type for the input CoNLL file",
                               dest="input_label_type", type=str, required=True, choices=["IOB1"])
    parser_labels.add_argument("--output-label-type",
                               help="Label type for the output CoNLL file",
                               dest="output_label_type", type=str, required=True, choices=["BIOUL"])
    parser_labels.add_argument("--overwrite",
                               help="Overwrite existing output file",
                               dest="overwrite", action="store_true")

    parser_spaces = subparsers.add_parser("CONVERT-SPACES",
                                          help="Convert CoNLL files with spaces as column separators into "
                                               "CoNLL files with tabulations as column separators.")
    parser_spaces.add_argument("--input-file",
                               help="Input CoNLL file (with spaces)",
                               dest="input_file", type=str, required=True)
    parser_spaces.add_argument("--output-file",
                               help="Output CoNLL file (with tabulations)",
                               dest="output_file", type=str, required=True)
    parser_spaces.add_argument("--overwrite",
                               help="Overwrite existing output file",
                               dest="overwrite", action="store_true")

    parser_train = subparsers.add_parser("TRAIN",
                                         help="Train a NER model")
    parser_train.add_argument("--option-file",
                              help="Training option file",
                              dest="option_file", type=str, required=True)
    parser_train.add_argument("--output-dir",
                              help="Output directory where files will be written",
                              dest="output_dir", type=str, required=True)
    parser_train.add_argument("--overwrite",
                              help="Overwrite existing output directory",
                              dest="overwrite", action="store_true")

    args = parser.parse_args()

    log = logging.getLogger('')
    log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s")

    # Setting debug level
    if args.debug:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)

    # Adding a stdout handler
    ch = logging.StreamHandler(sys.stdout)
    ch.setFormatter(log_format)
    log.addHandler(ch)

    if args.subparser_name == "TRAIN":

        if not os.path.isfile(os.path.abspath(args.option_file)):
            raise FileNotFoundError("The option file does not exist: {}".format(
                os.path.abspath(args.option_file)
            ))

        if not args.overwrite:
            if os.path.isdir(os.path.abspath(args.output_dir)):
                raise FileNotFoundError("The output dir already exists: {}".format(
                    os.path.abspath(args.output_dir)
                ))

        if os.path.isdir(os.path.abspath(args.output_dir)):
            logging.debug("Overwriting output directory")
            shutil.rmtree(os.path.abspath(args.output_dir))

        ensure_dir(directory=os.path.abspath(args.output_dir))

        log_file = os.path.join(os.path.abspath(args.output_dir), "training.log")
        log_format = logging.Formatter("%(asctime)s %(levelname)s %(message)s")
        log = logging.getLogger('')

        fh = logging.FileHandler(log_file, encoding="UTF-8")
        fh.setFormatter(log_format)
        log.addHandler(fh)

        train_model(option_file=os.path.abspath(args.option_file),
                    output_dir=os.path.abspath(args.output_dir))

    elif args.subparser_name == "CONVERT-SPACES":

        if not os.path.isfile(os.path.abspath(args.input_file)):
            raise FileNotFoundError("The input file does not exist: {}".format(
                os.path.abspath(args.input_file)
            ))

        if not args.overwrite:
            if os.path.isfile(os.path.abspath(args.output_file)):
                raise FileNotFoundError("The output file already exists: {}".format(
                    os.path.abspath(args.output_file)
                ))

        convert_spaces_to_tabulations(input_file=os.path.abspath(args.input_file),
                                      output_file=os.path.abspath(args.output_file))

    elif args.subparser_name == "CONVERT-LABELS":

        if not os.path.isfile(os.path.abspath(args.input_file)):
            raise FileNotFoundError("The input file does not exist: {}".format(
                os.path.abspath(args.input_file)
            ))

        if not args.overwrite:
            if os.path.isfile(os.path.abspath(args.output_file)):
                raise FileNotFoundError("The output file already exists: {}".format(
                    os.path.abspath(args.output_file)
                ))

        convert_labels(input_file=os.path.abspath(args.input_file),
                       output_file=os.path.abspath(args.output_file),
                       input_label_type=args.input_label_type,
                       output_label_type=args.output_label_type)

    elif args.subparser_name == "APPLY":

        if not os.path.isfile(os.path.abspath(args.input_file)):
            raise FileNotFoundError("The input file does not exist: {}".format(
                os.path.abspath(args.input_file)
            ))

        if not os.path.isdir(os.path.abspath(args.model_dir)):
            raise FileNotFoundError("The model dir does not exist: {}".format(
                os.path.abspath(args.model_dir)
            ))

        if not args.overwrite:
            if os.path.isfile(os.path.abspath(args.output_file)):
                raise FileNotFoundError("The output file already exists: {}".format(
                    os.path.abspath(args.output_file)
                ))

        apply_model(model_dir=os.path.abspath(args.model_dir),
                    input_file=os.path.abspath(args.input_file),
                    output_file=os.path.abspath(args.output_file),
                    cuda=args.cuda)

